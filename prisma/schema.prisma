generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Model, Session and VerificationToken models auto generated and are necessary for authentication (Github and Google)
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String? 
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    answers        Answer[]
    questionnaires Questionnaire[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Question {
    id String @id @default(cuid())
    title String @db.LongText
    questionWeight Int
    page String
    type String

    // answer weights
    yesWeight Int
    noWeight Int
    partiallyWeight Int

    // one to many relation
    // i.e. a question can have many answers
    answers Answer[]

    createdAt DateTime @default(now())
}

model Answer {
    id String @id @default(cuid())
    answer String
    answerWeight Int
    questionWeight Int

    // many to one relation
    // i.e. many answers are associated with one question
    question  Question @relation(fields: [questionId], references: [id])
    questionId String

    user  User @relation(fields: [userId], references: [id])
    userId String

    questionnaireId String
    questionnaire Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@index([questionId])
    @@index([userId])
    @@index([questionnaireId])
}

model Questionnaire {
    id String @id @default(cuid())

    companyName String
    sector String
    
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    answers Answer[]

    @@index([userId])
}


